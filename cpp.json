{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Main ": {
		"prefix": "ma",
		"body": [
		  "#include<iostream>",
		  "#include<bits/stdc++.h>",
		  "#include<unordered_set>",
		  "#include<unordered_map>",
		  "using namespace std;",
		  "",
		  "#define ll                  long long int ",
		  "#define llmin               -1e18",
		  "#define ff                  first",
		  "#define ss                  second",
		  "#define pb                  push_back",
		  "#define vi                  vector<int>",
		  "#define take(a,n)           vector <int> a; for(int i=0;i<n;i++){int aa; cin>>aa; a.pb(aa);}",
		  "#define vll                 vector<ll> ",
		  "#define full(a)             (a.begin(),a.end())",
		  "#define vc                  vector<char>",
		  "#define iz(n)               int n; cin>>n;",
		  "#define iz2(n,m)             int n,m; cin>>n>>m;",
		  "#define mii                 map<int,int>",
		  "#define setbits(x)          __builtin_popcountll(x)",
		  "#define zerobits(x)         __builtin_ctzll(x)    //zeros before first 1",
		  "#define com                 int t; cin>>t; while(t--)",
		  "#define forn(n)             for(int i=0;i<n;i++)",
		  "#define fo(x,y)             for(int i=x;i<y;i++)",
		  "",
		  "",
		  "int main(){",
		  "    ios_base::sync_with_stdio(false);",
		  "    cin.tie(NULL);",
		  "",
		  "    #ifndef ONLINE_JUDGE",
		  "    freopen(\"input.txt\", \"r\", stdin);",
		  "    freopen(\"output.txt\", \"w\", stdout);",
		  "    #endif",
		  "    ",
		  "    $1",
		  "    return 0;",
		  "}"
		],
		"description": "Main "
	  },             								/////////////////////
	  "Maine Default CP": {
		"prefix": "ma1",
		"body": [
		  "#include<iostream>",
		  "#include<bits/stdc++.h>",
		  "#include<unordered_set>",
		  "#include<unordered_map>",
		  "using namespace std;",
		  "int main(){",
		  "",
		  "    ios_base::sync_with_stdio(false);",
		  "    cin.tie(NULL);",
		  "    int t;",
		  "    cin>>t;",
		  "    while(t--){",
		  "        int n;",
		  "        cin>>n;",
		  "        $1",
		  "    }",
		  "",
		  "}"
		],
		"description": "Maine Default CP"
	  },												/////////////////////
	  "Decimal to Binary": {
		"prefix": "d2bs",
		"body": [
		  "string decimalToBinary(int n) ",
		  "{   ",
		  "    string s = bitset<64> (n).to_string(); ",
		  "    const auto loc1 = s.find('1');    ",
		  "    if(loc1 != string::npos) ",
		  "        return s.substr(loc1); ",
		  "      ",
		  "    return \"0\"; ",
		  "}"
		],
		"description": "Decimal to Binary"
	  },	                           					/////////////////////
	  "Sieve of Eratosthenes": {
		"prefix": "sieve",
		"body": [
		  "void primeSieve(int *p){",
		  "    //markes all odd int as potential prime's",
		  "    for (int i = 3; i < 1000000; i+=2)",
		  "    {",
		  "        p[i]=1;",
		  "    }",
		  "",
		  "    //Sieve",
		  "    for (ll i = 3; i < 1000000; i+=2)",
		  "    {",
		  "        //if current no. is not marked it's Prime",
		  "        if(p[i]==1){",
		  "            for (ll j=i*i; j < 1000000; j+=i)",
		  "            {",
		  "                p[j]=0;",
		  "            }",
		  "            ",
		  "        }",
		  "    }",
		  "    //special case",
		  "    p[2]=1;",
		  "    p[0]=p[1]=0;",
		  "}"
		],
		"description": "Sieve of Eratosthenes"
	  },									/////////////////////
	  "Euclide's GCD": {
		"prefix": "gcd",
		"body": [
		  "int gcd(int a, int b) ",
		  "{ ",
		  "    if (b == 0) ",
		  "        return a; ",
		  "    return gcd(b, a % b);  ",
		  "      ",
		  "} "
		],
		"description": "Euclide's GCD"
	  },						/////////////////////
	  "Fast exponent": {
		"prefix": "fastexpo",
		"body": [
		  "long long int fast_exp(int base, int exp)",
		  "{",
		  "    if(exp==1)",
		  "    return base;",
		  "    else",
		  "    {",
		  "        if(exp%2 == 0)",
		  "        {",
		  "            long long int base1 = pow(fast_exp(base, exp/2),2);",
		  "            if(base1 >= 1000000007)",
		  "            return base1%1000000007;",
		  "            else",
		  "            return base1;",
		  "        }",
		  "        else",
		  "        {",
		  "            long long int ans = (base*  pow(fast_exp(base,(exp-1)/2),2));",
		  "            if(ans >= 1000000007)",
		  "            return ans%1000000007;",
		  "            else",
		  "            return ans;",
		  "        }",
		  "    }",
		  "}"
		],
		"description": "Fast exponent"
	  },				/////////////////////
	  "Reverse Int": {
		"prefix": "revint",
		"body": [
		  "int reversDigits(int num) ",
		  "{ ",
		  "    int rev_num = 0; ",
		  "    while (num > 0) ",
		  "    { ",
		  "        rev_num = rev_num*10 + num%10; ",
		  "        num = num/10; ",
		  "    } ",
		  "    return rev_num; ",
		  "} "
		],
		"description": "Reverse Int"
	  },							/////////////////////
	  "Is Prime (bool)": {
		"prefix": "isprime",
		"body": [
		  "static boolean isPrime(int n)",
		  "    {",
		  "        // Corner cases",
		  "        if (n <= 1) return false;",
		  "        if (n <= 3) return true;",
		  "     ",
		  "        // This is checked so that we can skip ",
		  "        // middle five numbers in below loop",
		  "        if (n % 2 == 0 || n % 3 == 0) return false;",
		  "     ",
		  "        for (int i = 5; i * i <= n; i = i + 6)",
		  "            if (n % i == 0 || n % (i + 2) == 0)",
		  "            return false;",
		  "     ",
		  "        return true;",
		  "    }"
		],
		"description": "Is Prime (bool)"
	  },						/////////////////////
	  "Segmented Sieve in range(bool) ": {
		"prefix": "segsieve",
		"body": [
		  "vector<bool> segmentedSieve(long long L, long long R) {",
		  "    // generate all primes up to sqrt(R)",
		  "    long long lim = sqrt(R);",
		  "    vector<bool> mark(lim + 1, false);",
		  "    vector<long long> primes;",
		  "    for (long long i = 2; i <= lim; ++i) {",
		  "        if (!mark[i]) {",
		  "            primes.emplace_back(i);",
		  "            for (long long j = i * i; j <= lim; j += i)",
		  "                mark[j] = true;",
		  "        }",
		  "    }",
		  "",
		  "    vector<bool> isPrime(R - L + 1, true);",
		  "    for (long long i : primes)",
		  "        for (long long j = max(i * i, (L + i - 1) / i * i); j <= R; j += i)",
		  "            isPrime[j - L] = false;",
		  "    if (L == 1)",
		  "        isPrime[0] = false;",
		  "    return isPrime;",
		  "}"
		],
		"description": "Segmented Sieve in range(bool) "
	  },										/////////////////////
	  "Prime factors with power": {
		"prefix": "primefactor",
		"body": [
		  "void primeFactors(int n,int *factor)  ",
		  "{  ",
		  "    for (int i = 0; i < n; i++)",
		  "        {",
		  "            factor[i]=0;",
		  "        }",
		  "   ",
		  "    while (n % 2 == 0)  ",
		  "    {  ",
		  "        factor[2]++;",
		  "        n = n/2;  ",
		  "    }  ",
		  "  ",
		  "    ",
		  "    for (int i = 3; i <= sqrt(n); i = i + 2)  ",
		  "    {  ",
		  "          ",
		  "        while (n % i == 0)  ",
		  "        {  ",
		  "            factor[i]++;",
		  "            n = n/i;  ",
		  "        }  ",
		  "    }  ",
		  " ",
		  "    if (n > 2)  ",
		  "        factor[n]++;",
		  "}"
		],
		"description": "Prime factors with power"
	  },								/////////////////////
	  "min Coin change": {
		"prefix": "coinchange",
		"body": [
		  "      ",
		  "  int minCoins(int arr[], int m, int value) ",
		  "    { ",
		  "      ",
		  "        int dp[value + 1]; ",
		  "  ",
		  "       ",
		  "        dp[0] = 0; ",
		  "  ",
		  "        ",
		  "        for (int i = 1; i <= value; i++) ",
		  "        dp[i] = INT_MAX; ",
		  "  ",
		  "       ",
		  "        for (int i = 1; i <= value; i++) ",
		  "        { ",
		  "            ",
		  "            for (int j = 0; j < m; j++) ",
		  "            if (arr[j] <= i) ",
		  "            { ",
		  "                int sub_res = dp[i - arr[j]]; ",
		  "                if (sub_res != INT_MAX  ",
		  "                       && sub_res + 1 < dp[i]) ",
		  "                       dp[i] = sub_res + 1; ",
		  "                         ",
		  "                  ",
		  "            } ",
		  "              ",
		  "        } ",
		  "        return dp[value]; ",
		  "          ",
		  "    }  "
		],
		"description": "min Coin change"
	  },							/////////////////////
	  "total number of ways": {
		"prefix": "coinchange",
		"body": [
		  "long long numberOfWays(int c[],int n,int val)",
		  "{",
		  "    long long dp[val+1][n+1];",
		  "    for(int i=0;i<=n;i++){",
		  "        dp[0][i]=1;",
		  "    }",
		  "    for(int i=0;i<=val;i++){",
		  "        dp[i][0]=0;",
		  "    }",
		  "    for(int i=1;i<=val;i++){",
		  "        for(int j=1;j<=n;j++){",
		  "            dp[i][j]=dp[i][j-1];",
		  "            if(c[j-1]<=i){",
		  "                dp[i][j]+=dp[i-c[j-1]][j];",
		  "            }",
		  "        }",
		  "    }",
		  "    return dp[val][n];",
		  "    ",
		  "}"
		],
		"description": "total number of ways"
	  },										//////////////////////////////////////
	  "iterative": {
		"prefix": "fastexp",
		"body": [
		  "long long modular(long long base, long long exp) {",
		  "    long long  mod=1000000007;",
		  "   long long res = 1;",
		  "   while (exp > 0) {",
		  "      if (exp % 2 == 1)",
		  "         res= (res * base) % mod;",
		  "      exp = exp >> 1;",
		  "      base = (base * base) % mod;",
		  "   }",
		  "   return res;",
		  "}"
		],
		"description": "iterative"
	  },											//////////////////////////////////////
	  "Frugal Number": {
		"prefix": "frugal",
		"body": [
		  "vector<long long int> primes(long long int n) ",
		  "{ ",
		  "    bool prime[n + 1]; ",
		  "  ",
		  "    ",
		  "    memset(prime, true, sizeof(prime)); ",
		  "    for (int i = 2; i * i <= n; i++) { ",
		  "  ",
		  "        ",
		  "        if (prime[i] == true) { ",
		  "  ",
		  "            ",
		  "            for (int j = i * 2; j <= n; j += i) ",
		  "                prime[j] = false; ",
		  "        } ",
		  "    } ",
		  "  ",
		  "    vector<long long int> arr;     ",
		  "    for (int i = 2; i < n; i++)  ",
		  "        if (prime[i]) ",
		  "            arr.push_back(i);     ",
		  "  ",
		  "    return arr; ",
		  "} ",
		  "  ",
		  "int countDigits(long long int n) ",
		  "{ ",
		  "    long long int temp = n; ",
		  "    int c = 0; ",
		  "    while (temp != 0) { ",
		  "        temp = temp / 10; ",
		  "        c++; ",
		  "    } ",
		  "    return c; ",
		  "} ",
		  "  ",
		  "bool frugal(long long int n) ",
		  "{ ",
		  "    vector<long long int> r = primes(n);    ",
		  "    long long int t = n; ",
		  "    long long int s = 0; ",
		  "    for (int i = 0; i < r.size(); i++) { ",
		  "        if (t % r[i] == 0) { ",
		  "              ",
		  "            long long int k = 0;   ",
		  "              ",
		  "            while (t % r[i] == 0) { ",
		  "                t = t / r[i]; ",
		  "                k++; ",
		  "            } ",
		  "  ",
		  "            if (k == 1)  ",
		  "                s = s + countDigits(r[i]); ",
		  "            else if (k != 1)  ",
		  "                s = s + countDigits(r[i]) + countDigits(k);             ",
		  "        } ",
		  "    } ",
		  "  ",
		  "    return (countDigits(n) > s && s != 0); ",
		  "} "
		],
		"description": "Frugal Number"
	  },												//////////////////////////////////////
	  "P-Smooth Numbers or P-friable": {
		"prefix": "psmooth",
		"body": [
		  "bool check(int n, int p)  ",
		  "{ ",
		  "    int maximum = -1; ",
		  "      ",
		  "    while (!(n % 2))  ",
		  "    { ",
		  "        maximum = max(maximum, 2); ",
		  "        n = n/2; ",
		  "    } ",
		  "  ",
		  "    for (int i = 3; i <= sqrt(n); i += 2) ",
		  "    { ",
		  "        while (n % i == 0)  ",
		  "        {    ",
		  "            maximum = max(maximum,i);  ",
		  "            n = n / i; ",
		  "        } ",
		  "    } ",
		  "  ",
		  "    if (n > 2) ",
		  "        maximum = max(maximum, n); ",
		  "      ",
		  "    return (maximum <= p); ",
		  "} "
		],
		"description": "P-Smooth Numbers or P-friable"
	  },													//////////////////////////////////////
	  "k-Rough Number or k-Jagged Number": {
		"prefix": "krough",
		"body": [
		  "bool isKRough(int n, int k) ",
		  "{ ",
		  "    if (n % 2 == 0) ",
		  "        return (k <= 2); ",
		  "  ",
		  "    for (int i = 3; i*i <= n; i = i+2) ",
		  "        if (n%i == 0) ",
		  "            return (i >= k); ",
		  "  ",
		  "   return (n >= k); ",
		  "} "
		],
		"description": "k-Rough Number or k-Jagged Number"
	  },															//////////////////////////////////////
	  "extended euclidian": {
		"prefix": "exeuclidian",
		"body": [
		  "int gcdExtended(int a, int b, int *x, int *y)  ",
		  "{  ",
		  "    if (a == 0)  ",
		  "    {  ",
		  "        *x = 0;  ",
		  "        *y = 1;  ",
		  "        return b;  ",
		  "    }  ",
		  "  ",
		  "    int x1, y1;  ",
		  "    int gcd = gcdExtended(b%a, a, &x1, &y1);  ",
		  "  ",
		  "   ",
		  "    *x = y1 - (b/a) * x1;  ",
		  "    *y = x1;  ",
		  "  ",
		  "    return gcd;  ",
		  "}  "
		],
		"description": "extended euclidian"
	  },														//////////////////////////////////////
	  

	  									

}